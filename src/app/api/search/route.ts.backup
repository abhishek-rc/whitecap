import { NextRequest, NextResponse } from 'next/server';
import { vertexAICommerceService } from '@/lib/vertex-ai-commerce';

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const query = searchParams.get('q') || '';
    const page = parseInt(searchParams.get('page') || '1');
    const limit = parseInt(searchParams.get('limit') || '20');
    const category = searchParams.get('category') || '';
    const brand = searchParams.get('brand') || '';
    const sfPreferred = searchParams.get('sfPreferred') === 'true';
    const availability = searchParams.get('availability') || '';
    const sortBy = searchParams.get('sortBy') || '';
    const visitorId = searchParams.get('visitorId') || 'anonymous-user';

    // Build filter string for Vertex AI Search
    const filters: { [key: string]: any } = {};
    if (category) filters.category = category;
    if (brand) filters.brand = brand;
    if (sfPreferred) filters.sfPreferred = true;
    if (availability) filters.availability = availability;

    const filter = vertexAICommerceService.buildFilter(filters);

    // Build order by string
    let orderBy = '';
    switch (sortBy) {
      case 'price_asc':
        orderBy = 'priceInfo.price asc';
        break;
      case 'price_desc':
        orderBy = 'priceInfo.price desc';
        break;
      case 'name_asc':
        orderBy = 'title asc';
        break;
      case 'name_desc':
        orderBy = 'title desc';
        break;
      case 'availability':
        orderBy = 'availability desc';
        break;
      default:
        orderBy = ''; // Use default relevance ranking
    }

    // Perform search using Vertex AI Search for Commerce
    let searchResponse;
    try {
      // For very short queries (1-2 characters), use wildcard search
      let searchQuery = query;
      if (query.length > 0 && query.length <= 2) {
        searchQuery = `${query}*`;
      }

      searchResponse = await vertexAICommerceService.search({
        query: searchQuery,
        visitorId,
        pageSize: limit,
        offset: (page - 1) * limit,
        filter,
        orderBy,
        facetSpecs: [
          {
            facetKey: { key: 'attributes.brand' },
            limit: 20
          },
          {
            facetKey: { key: 'categories' },
            limit: 20
          },
          {
            facetKey: { key: 'availability' },
            limit: 4
          }
        ],
        boostSpec: {
          conditionBoostSpecs: [
            {
              condition: 'availability: ANY("IN_STOCK")',
              boost: 0.5
            }
          ]
        }
      });
      
      // Debug: Log the actual search response structure
      console.log('🔍 Search response structure:');
      console.log('Total results:', searchResponse.totalSize);
      if (searchResponse.results && searchResponse.results.length > 0) {
        console.log('First result structure:', JSON.stringify(searchResponse.results[0], null, 2));
      }
    } catch (vertexError) {
      console.log('Vertex AI search failed, falling back to local search:', vertexError instanceof Error ? vertexError.message : String(vertexError));
      throw vertexError; // Re-throw to trigger fallback
    }

    // Transform results to our frontend format
    const products = await Promise.all((searchResponse.results || []).map(async (result: any) => {
      // If we only have the product name, fetch full product details
      if (result.product && result.product.name && !result.product.title) {
        try {
          const fullProduct = await vertexAICommerceService.getProduct(result.id);
          return {
            SKU: fullProduct.id || '',
            DisplayName: fullProduct.title || '',
            Description: fullProduct.description || '',
            Category: (fullProduct.categories || [])[0] || '',
            Brand: fullProduct.attributes?.brand?.text?.[0] || '',
            Vendor: fullProduct.attributes?.vendor?.text?.[0] || '',
            VendorName: fullProduct.attributes?.vendorName?.text?.[0] || '',
            Units: fullProduct.attributes?.units?.text?.[0] || '',
            SFPreferred: fullProduct.attributes?.isSFPreferred?.text?.[0] === 'true',
            ImageURL: fullProduct.images?.[0]?.uri || '',
            availability: fullProduct.availability === 'IN_STOCK' ? 'Available' : 'Not Available',
            availableQuantity: fullProduct.availableQuantity || 0,
            totalStock: fullProduct.attributes?.totalStock?.numbers?.[0] || 0,
            stockWarehouses: fullProduct.attributes?.stockWarehouses?.numbers?.[0] || 0
          };
        } catch (error) {
          console.error('Error fetching product details:', error);
          return {
            SKU: result.id || '',
            DisplayName: result.product?.title || '',
            Description: result.product?.description || '',
            Category: (result.product?.categories || [])[0] || '',
            Brand: result.product?.attributes?.brand?.text?.[0] || '',
            Vendor: result.product?.attributes?.vendor?.text?.[0] || '',
            VendorName: result.product?.attributes?.vendorName?.text?.[0] || '',
            Units: result.product?.attributes?.units?.text?.[0] || '',
            SFPreferred: result.product?.attributes?.isSFPreferred?.text?.[0] === 'true',
            ImageURL: result.product?.images?.[0]?.uri || '',
            availability: result.product?.availability === 'IN_STOCK' ? 'Available' : 'Not Available',
            availableQuantity: result.product?.availableQuantity || 0,
            totalStock: result.product?.attributes?.totalStock?.numbers?.[0] || 0,
            stockWarehouses: result.product?.attributes?.stockWarehouses?.numbers?.[0] || 0
          };
        }
      }
      
      // Use the product data directly if available
      return {
        SKU: result.product?.id || '',
        DisplayName: result.product?.title || '',
        Description: result.product?.description || '',
        Category: (result.product?.categories || [])[0] || '',
        Brand: result.product?.attributes?.brand?.text?.[0] || '',
        Vendor: result.product?.attributes?.vendor?.text?.[0] || '',
        VendorName: result.product?.attributes?.vendorName?.text?.[0] || '',
        Units: result.product?.attributes?.units?.text?.[0] || '',
        SFPreferred: result.product?.attributes?.isSFPreferred?.text?.[0] === 'true',
        ImageURL: result.product?.images?.[0]?.uri || '',
        availability: result.product?.availability === 'IN_STOCK' ? 'Available' : 'Not Available',
        availableQuantity: result.product?.availableQuantity || 0,
        totalStock: result.product?.attributes?.totalStock?.numbers?.[0] || 0,
        stockWarehouses: result.product?.attributes?.stockWarehouses?.numbers?.[0] || 0
      };
    }));

    // Extract facets for filtering
    const facets = {
      brands: (searchResponse.facets || [])
        .find((f: any) => f.key === 'attributes.brand')?.values
        ?.map((v: any) => ({ value: v.value, count: v.count })) || [],
      categories: (searchResponse.facets || [])
        .find((f: any) => f.key === 'categories')?.values
        ?.map((v: any) => ({ value: v.value, count: v.count })) || [],
      availability: (searchResponse.facets || [])
        .find((f: any) => f.key === 'availability')?.values
        ?.map((v: any) => ({ value: v.value, count: v.count })) || [],
      sfPreferred: [
        // Calculate sfPreferred from products since facet is disabled
        { value: true, count: products.filter(p => p.SFPreferred).length },
        { value: false, count: products.filter(p => !p.SFPreferred).length }
      ]
    };

    // Record user event for analytics and personalization
    if (query) {
      await vertexAICommerceService.writeUserEvent({
        eventType: 'search',
        visitorId,
        eventTime: new Date().toISOString(),
        searchQuery: query,
        filter,
        orderBy,
        pageCategories: category ? [category] : [],
        uri: request.url
      });
    }

    return NextResponse.json({
      products,
      facets,
      pagination: {
        page,
        limit,
        total: searchResponse.totalSize || 0,
        totalPages: Math.ceil((searchResponse.totalSize || 0) / limit)
      },
      query,
      correctedQuery: searchResponse.correctedQuery,
      attributionToken: searchResponse.attributionToken,
      appliedControls: searchResponse.appliedControls || []
    });

  } catch (error) {
    console.error('Search API error:', error);
    
    // Fallback to local search if Vertex AI is not available
    try {
      const { dataService } = await import('@/lib/data');
      const { searchParams } = new URL(request.url);
      const query = searchParams.get('q') || '';
      const page = parseInt(searchParams.get('page') || '1');
      const limit = parseInt(searchParams.get('limit') || '20');
      const offset = (page - 1) * limit;
      
      const results = await dataService.search(query, {
        category: searchParams.get('category') ? [searchParams.get('category')!] : undefined,
        brand: searchParams.get('brand') ? [searchParams.get('brand')!] : undefined,
        sfPreferred: searchParams.get('sfPreferred') === 'true' ? true : undefined,
      }, offset, limit);

      // Transform to match our expected format
      const transformedProducts = results.products.map(product => ({
        SKU: product.sku,
        DisplayName: product.displayName,
        Description: product.description,
        Category: product.category,
        Brand: product.brand,
        Vendor: product.vendor,
        VendorName: product.vendorName,
        Units: product.units,
        SFPreferred: product.isSFPreferred,
        ImageURL: product.imageURL,
        availability: product.availability,
        availableQuantity: 0, // Will be calculated from stock
        totalStock: 0,
        stockWarehouses: 0
      }));

      return NextResponse.json({
        products: transformedProducts,
        facets: {
          brands: results.facets.brands,
          categories: results.facets.categories,
          availability: [
            { value: 'Available', count: transformedProducts.filter(p => p.availability === 'Available').length },
            { value: 'Not Available', count: transformedProducts.filter(p => p.availability === 'Not Available').length }
          ],
          sfPreferred: [
            { value: true, count: transformedProducts.filter(p => p.SFPreferred).length },
            { value: false, count: transformedProducts.filter(p => !p.SFPreferred).length }
          ]
        },
        pagination: {
          page,
          limit,
          total: results.total,
          totalPages: Math.ceil(results.total / limit)
        },
        query,
        fallback: true,
        queryTime: results.queryTime
      });
    } catch (fallbackError) {
      console.error('Fallback search error:', fallbackError);
      return NextResponse.json(
        { error: 'Search service unavailable' },
        { status: 500 }
      );
    }
  }
}
